// Generated by CoffeeScript 1.7.1
var DEFAULT_ACTIONS, buildCachedResourceClass, readArrayCache, readCache, writeCache;

DEFAULT_ACTIONS = {
  get: {
    method: 'GET'
  },
  query: {
    method: 'GET',
    isArray: true
  },
  save: {
    method: 'POST'
  },
  remove: {
    method: 'DELETE'
  },
  "delete": {
    method: 'DELETE'
  }
};

readArrayCache = require('./read_array_cache');

readCache = require('./read_cache');

writeCache = require('./write_cache');

module.exports = buildCachedResourceClass = function($resource, $timeout, $q, debug, args) {
  var $key, Cache, CachedResource, Resource, ResourceCacheArrayEntry, ResourceCacheEntry, ResourceWriteQueue, actions, arg, boundParams, handler, isPermissibleBoundValue, name, param, paramDefault, paramDefaults, params, resourceManager, url, _ref;
  ResourceCacheEntry = require('./resource_cache_entry')(debug);
  ResourceCacheArrayEntry = require('./resource_cache_array_entry')(debug);
  ResourceWriteQueue = require('./resource_write_queue')(debug);
  Cache = require('./cache')(debug);
  resourceManager = this;
  $key = args.shift();
  url = args.shift();
  while (args.length) {
    arg = args.pop();
    if (angular.isObject(arg[Object.keys(arg)[0]])) {
      actions = arg;
    } else {
      paramDefaults = arg;
    }
  }
  actions = angular.extend({}, DEFAULT_ACTIONS, actions);
  if (paramDefaults == null) {
    paramDefaults = {};
  }
  boundParams = {};
  for (param in paramDefaults) {
    paramDefault = paramDefaults[param];
    if (paramDefault[0] === '@') {
      boundParams[paramDefault.substr(1)] = param;
    }
  }
  Resource = $resource.call(null, url, paramDefaults, actions);
  isPermissibleBoundValue = function(value) {
    return angular.isDate(value) || angular.isNumber(value) || angular.isString(value);
  };
  CachedResource = (function() {
    CachedResource.prototype.$cache = true;

    function CachedResource(attrs) {
      angular.extend(this, attrs);
    }

    CachedResource.prototype.$params = function() {
      var attribute, params;
      params = {};
      for (attribute in boundParams) {
        param = boundParams[attribute];
        if (isPermissibleBoundValue(this[attribute])) {
          params[param] = this[attribute];
        }
      }
      return params;
    };

    CachedResource.prototype.$$addToCache = function() {
      var entry;
      entry = new ResourceCacheEntry($key, this.$params());
      entry.set(this, true);
      return this;
    };

    CachedResource.$clearAll = function(_arg) {
      var cacheArrayEntry, clearPendingWrites, exceptFor, exceptForKeys, key, params, queue, resource, resourceParams, _i, _j, _len, _len1, _ref, _ref1;
      _ref = _arg != null ? _arg : {}, exceptFor = _ref.exceptFor, clearPendingWrites = _ref.clearPendingWrites;
      exceptForKeys = [];
      if (angular.isObject(exceptFor)) {
        cacheArrayEntry = new ResourceCacheArrayEntry($key, exceptFor).load();
        exceptForKeys.push(cacheArrayEntry.key);
        if (cacheArrayEntry.value) {
          exceptFor = (function() {
            var _i, _len, _ref1, _results;
            _ref1 = cacheArrayEntry.value;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              params = _ref1[_i];
              _results.push(params);
            }
            return _results;
          })();
        }
      }
      if (exceptFor == null) {
        exceptFor = [];
      }
      if (!clearPendingWrites) {
        _ref1 = CachedResource.$writes, queue = _ref1.queue, key = _ref1.key;
        exceptForKeys.push(key);
        for (_i = 0, _len = queue.length; _i < _len; _i++) {
          resourceParams = queue[_i].resourceParams;
          exceptFor.push(resourceParams);
        }
      }
      for (_j = 0, _len1 = exceptFor.length; _j < _len1; _j++) {
        params = exceptFor[_j];
        resource = new CachedResource(params);
        exceptForKeys.push(new ResourceCacheEntry($key, resource.$params()).key);
      }
      return Cache.clear({
        key: $key,
        exceptFor: exceptForKeys
      });
    };

    CachedResource.$addToCache = function(attrs) {
      return new CachedResource(attrs).$$addToCache();
    };

    CachedResource.$resource = Resource;

    CachedResource.$key = $key;

    return CachedResource;

  })();
  CachedResource.$writes = new ResourceWriteQueue(CachedResource, $timeout);
  for (name in actions) {
    params = actions[name];
    handler = params.method === 'GET' && params.isArray ? readArrayCache($q, debug, name, CachedResource) : params.method === 'GET' ? readCache($q, debug, name, CachedResource) : (_ref = params.method) === 'POST' || _ref === 'PUT' || _ref === 'DELETE' || _ref === 'PATCH' ? writeCache($q, debug, name, CachedResource) : void 0;
    CachedResource[name] = handler;
    if (params.method !== 'GET') {
      CachedResource.prototype["$" + name] = handler;
    }
  }
  return CachedResource;
};

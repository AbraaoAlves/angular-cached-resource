// Generated by CoffeeScript 1.7.1
var $cachedResourceFactory, $cachedResourceProvider, app, debugMode, resourceManagerListener;

resourceManagerListener = null;

debugMode = false;

if (typeof module !== "undefined" && module !== null) {
  module.exports = app = angular.module('ngCachedResource', ['ngResource']);
}

app.provider('$cachedResource', $cachedResourceProvider = (function() {
  function $cachedResourceProvider() {
    this.$get = $cachedResourceFactory;
  }

  $cachedResourceProvider.prototype.setDebugMode = function(newSetting) {
    if (newSetting == null) {
      newSetting = true;
    }
    return debugMode = newSetting;
  };

  return $cachedResourceProvider;

})());

$cachedResourceFactory = [
  '$resource', '$timeout', '$q', '$log', function($resource, $timeout, $q, $log) {
    var $cachedResource, CachedResourceManager, debug, fn, resourceManager, _i, _len, _ref;
    debug = debugMode ? angular.bind($log, $log.debug, 'ngCachedResource') : (function() {});
    CachedResourceManager = require('./cached_resource_manager')(debug);
    resourceManager = new CachedResourceManager($resource, $timeout, $q);
    if (resourceManagerListener) {
      document.removeEventListener('online', resourceManagerListener);
    }
    resourceManagerListener = function(event) {
      return resourceManager.flushQueues();
    };
    document.addEventListener('online', resourceManagerListener);
    $cachedResource = function() {
      return resourceManager.add.apply(resourceManager, arguments);
    };
    _ref = ['clearAll', 'clearUndefined'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fn = _ref[_i];
      $cachedResource[fn] = angular.bind(resourceManager, resourceManager[fn]);
    }
    return $cachedResource;
  }
];

// Generated by CoffeeScript 1.7.1
var app;

app = angular.module('cachedResource', ['ngResource']);

app.factory('cachedResource', [
  '$resource', '$timeout', '$q', function($resource, $timeout, $q) {
    var LOCAL_STORAGE_PREFIX, ResourceCacheEntry, cache, cachedResources, defaultActions, readCache, writeCache;
    LOCAL_STORAGE_PREFIX = 'cachedResource://';
    cache = window.localStorage != null ? {
      getItem: function(key, fallback) {
        var item;
        item = localStorage.getItem("" + LOCAL_STORAGE_PREFIX + key);
        if (item != null) {
          return angular.fromJson(item);
        } else {
          return fallback;
        }
      },
      setItem: function(key, value) {
        localStorage.setItem("" + LOCAL_STORAGE_PREFIX + key, angular.toJson(value));
        return value;
      }
    } : {
      getItem: function(key, fallback) {
        return fallback;
      },
      setItem: function(key, value) {
        return value;
      }
    };
    ResourceCacheEntry = (function() {
      function ResourceCacheEntry(resourceKey, params) {
        var param, paramKeys, _ref;
        this.key = resourceKey;
        paramKeys = Object.keys(params).sort();
        if (paramKeys.length) {
          this.key += '?' + ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = paramKeys.length; _i < _len; _i++) {
              param = paramKeys[_i];
              _results.push("" + param + "=" + params[param]);
            }
            return _results;
          })()).join('&');
        }
        _ref = cache.getItem(this.key, {}), this.value = _ref.value, this.dirty = _ref.dirty;
      }

      ResourceCacheEntry.prototype.set = function(value) {
        this.value = value;
        this.dirty = true;
        return this._update();
      };

      ResourceCacheEntry.prototype.clean = function() {
        this.dirty = false;
        return this._update();
      };

      ResourceCacheEntry.prototype._update = function() {
        return cache.setItem(this.key, {
          value: this.value,
          dirty: this.dirty
        });
      };

      return ResourceCacheEntry;

    })();
    cachedResources = [];
    readCache = function(action, resourceKey) {
      return function(parameters) {
        var cacheEntry, deferred, item, resource, _i, _len, _ref;
        resource = action.apply(null, arguments);
        resource.$httpPromise = resource.$promise;
        if (angular.isFunction(parameters)) {
          parameters = null;
        }
        cacheEntry = new ResourceCacheEntry(resourceKey, parameters);
        resource.$httpPromise.then(function(response) {
          return cacheEntry.set(response);
        });
        if (cacheEntry.value) {
          if (angular.isArray(cacheEntry.value)) {
            _ref = cacheEntry.value;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              resource.push(item);
            }
          } else {
            angular.extend(resource, cacheEntry.value);
          }
          deferred = $q.defer();
          resource.$promise = deferred.promise;
          deferred.resolve(resource);
        }
        return resource;
      };
    };
    writeCache = function(action, resourceKey) {
      return function() {
        var args, cacheEntry, error, params, postData, resource, success;
        args = Array.prototype.slice.call(arguments);
        params = angular.isObject(args[1]) ? args.shift() : {};
        postData = args[0], success = args[1], error = args[2];
        resource = this || {};
        cacheEntry = new ResourceCacheEntry(resourceKey, params);
        if (cacheEntry.dirty && angular.equals(cacheEntry.data, postData)) {
          return resource;
        }
        return resource = action.call(null, params, postData, success, error);
      };
    };
    defaultActions = {
      get: {
        method: 'GET'
      },
      query: {
        method: 'GET',
        isArray: true
      },
      save: {
        method: 'POST'
      },
      remove: {
        method: 'DELETE'
      },
      "delete": {
        method: 'DELETE'
      }
    };
    return function() {
      var $key, CachedResource, Resource, action, actions, arg, args, name, paramDefaults, params, url, _ref;
      args = Array.prototype.slice.call(arguments);
      $key = args.shift();
      url = args.shift();
      while (args.length) {
        arg = args.pop();
        if (angular.isObject(arg[Object.keys(arg)[0]])) {
          actions = arg;
        } else {
          paramDefaults = arg;
        }
      }
      if (actions == null) {
        actions = defaultActions;
      }
      if (paramDefaults == null) {
        paramDefaults = {};
      }
      Resource = $resource.call(null, url, paramDefaults, actions);
      CachedResource = {
        $resource: Resource,
        $key: $key
      };
      for (name in actions) {
        params = actions[name];
        action = angular.bind(Resource, Resource[name]);
        if (params.method === 'GET') {
          CachedResource[name] = readCache(action, $key);
        } else if ((_ref = params.method) === 'POST' || _ref === 'PUT' || _ref === 'DELETE') {
          CachedResource[name] = writeCache(action, $key);
        } else {
          CachedResource[name] = action;
        }
      }
      cachedResources[$key] = CachedResource;
      return CachedResource;
    };
  }
]);

app;

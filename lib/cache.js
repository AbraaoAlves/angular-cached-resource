// Generated by CoffeeScript 1.7.1
var LOCAL_STORAGE_PREFIX, buildKey, cacheKeyHasPrefix, localStorage, memoryCache;

LOCAL_STORAGE_PREFIX = 'cachedResource://';

localStorage = window.localStorage;

memoryCache = {};

buildKey = function(key) {
  return "" + LOCAL_STORAGE_PREFIX + key;
};

cacheKeyHasPrefix = function(cacheKey, prefix) {
  var index, nextChar;
  if (prefix == null) {
    return cacheKey.indexOf(LOCAL_STORAGE_PREFIX) === 0;
  }
  prefix = buildKey(prefix);
  index = cacheKey.indexOf(prefix);
  nextChar = cacheKey[prefix.length];
  return index === 0 && ((nextChar == null) || (nextChar === '?' || nextChar === '/'));
};

module.exports = function(debug) {
  return {
    getItem: function(key, fallbackValue) {
      var item, out;
      key = buildKey(key);
      item = memoryCache[key];
      if (item == null) {
        item = localStorage.getItem(key);
      }
      out = item != null ? angular.fromJson(item) : fallbackValue;
      debug("CACHE GET: " + key, out);
      return out;
    },
    setItem: function(key, value) {
      var stringValue;
      key = buildKey(key);
      stringValue = angular.toJson(value);
      try {
        localStorage.setItem(key, stringValue);
        if (memoryCache[key] != null) {
          delete memoryCache[key];
        }
      } catch (_error) {
        memoryCache[key] = stringValue;
      }
      debug("CACHE PUT: " + key, angular.fromJson(angular.toJson(value)));
      return value;
    },
    clear: function(_arg) {
      var cacheKey, cacheKeys, exceptFor, exception, i, key, skipKey, _i, _j, _k, _len, _len1, _ref, _ref1, _results;
      _ref = _arg != null ? _arg : {}, key = _ref.key, exceptFor = _ref.exceptFor;
      if (exceptFor == null) {
        exceptFor = [];
      }
      cacheKeys = [];
      for (i = _i = 0, _ref1 = localStorage.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        cacheKey = localStorage.key(i);
        if (!cacheKeyHasPrefix(cacheKey, key)) {
          continue;
        }
        skipKey = false;
        for (_j = 0, _len = exceptFor.length; _j < _len; _j++) {
          exception = exceptFor[_j];
          if (!(cacheKeyHasPrefix(cacheKey, exception))) {
            continue;
          }
          skipKey = true;
          break;
        }
        if (skipKey) {
          continue;
        }
        cacheKeys.push(cacheKey);
      }
      _results = [];
      for (_k = 0, _len1 = cacheKeys.length; _k < _len1; _k++) {
        cacheKey = cacheKeys[_k];
        _results.push(localStorage.removeItem(cacheKey));
      }
      return _results;
    }
  };
};

// Generated by CoffeeScript 1.7.1
var processReadArgs, readCache;

processReadArgs = require('./process_read_args');

module.exports = readCache = function($q, debug, name, CachedResource) {
  var ResourceCacheEntry;
  ResourceCacheEntry = require('./resource_cache_entry')(debug);
  return function() {
    var cacheDeferred, cacheEntry, httpDeferred, instance, params, readHttp, _ref;
    _ref = processReadArgs($q, arguments), params = _ref.params, cacheDeferred = _ref.deferred;
    httpDeferred = $q.defer();
    instance = new CachedResource({
      $promise: cacheDeferred.promise,
      $httpPromise: httpDeferred.promise
    });
    cacheEntry = new ResourceCacheEntry(CachedResource.$key, params).load();
    readHttp = function() {
      var resource;
      resource = CachedResource.$resource[name].call(CachedResource.$resource, params);
      resource.$promise.then(function(response) {
        angular.extend(instance, response);
        if (!cacheEntry.value) {
          cacheDeferred.resolve(instance);
        }
        httpDeferred.resolve(instance);
        return cacheEntry.set(response, false);
      });
      return resource.$promise["catch"](function(error) {
        if (!cacheEntry.value) {
          cacheDeferred.reject(error);
        }
        return httpDeferred.reject(error);
      });
    };
    if (cacheEntry.dirty) {
      CachedResource.$writes.processResource(params, readHttp);
    } else {
      readHttp();
    }
    if (cacheEntry.value) {
      angular.extend(instance, cacheEntry.value);
      cacheDeferred.resolve(instance);
    }
    return instance;
  };
};

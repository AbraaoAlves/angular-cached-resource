(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app, localStorageKey, simpleCache;

app = angular.module('cachedResource', ['ngResource']);

localStorageKey = function(url, parameters) {
  var name, value;
  for (name in parameters) {
    value = parameters[name];
    url = url.replace(":" + name, value);
  }
  return url;
};

simpleCache = function(Resource, method, url) {
  return function(parameters) {
    var cached, item, key, resource, _i, _len;
    if (angular.isFunction(parameters)) {
      parameters = null;
    }
    key = localStorageKey(url, parameters);
    resource = Resource[method].apply(Resource, arguments);
    resource.$promise.then(function(response) {
      return localStorage.setItem(key, angular.toJson(response));
    });
    cached = angular.fromJson(localStorage.getItem(key));
    if (angular.isArray(cached)) {
      for (_i = 0, _len = cached.length; _i < _len; _i++) {
        item = cached[_i];
        resource.push(item);
      }
      return resource;
    } else {
      return angular.extend(resource, cached);
    }
  };
};

app.service('cacheResource', [
  '$resource', function($resource) {
    if (window.localStorage == null) {
      return (function(identity) {
        return identity;
      });
    }
    return function(url) {
      var CachedResource, Resource, method, _i, _len, _ref;
      Resource = $resource.apply(null, arguments);
      CachedResource = {};
      _ref = ['get', 'query'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        if (Resource[method] != null) {
          CachedResource[method] = simpleCache(Resource, method, url);
        }
      }
      return CachedResource;
    };
  }
]);

app;

},{}]},{},[1])
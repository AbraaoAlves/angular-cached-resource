(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var app;

app = angular.module('cachedResource', ['ngResource']);

app.factory('cachedResource', [
  '$resource', '$timeout', '$q', function($resource, $timeout, $q) {
    var LOCAL_STORAGE_PREFIX, cache, defaultActions, readCache, readKey, writeCache;
    LOCAL_STORAGE_PREFIX = 'cachedResource://';
    cache = window.localStorage != null ? {
      getItem: function(key, fallback) {
        var item;
        item = localStorage.getItem("" + LOCAL_STORAGE_PREFIX + key);
        if (item != null) {
          return angular.fromJson(item);
        } else {
          return fallback;
        }
      },
      setItem: function(key, value) {
        localStorage.setItem("" + LOCAL_STORAGE_PREFIX + key, angular.toJson(value));
        return value;
      }
    } : {
      getItem: function(key, fallback) {
        return fallback;
      },
      setItem: function(key, value) {
        return value;
      }
    };
    readKey = function(resourceKey, parameters) {
      var key, param, paramKeys;
      key = resourceKey;
      paramKeys = Object.keys(parameters).sort();
      if (paramKeys.length) {
        key += '?' + ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = paramKeys.length; _i < _len; _i++) {
            param = paramKeys[_i];
            _results.push("" + param + "=" + parameters[param]);
          }
          return _results;
        })()).join('&');
      }
      return key;
    };
    readCache = function(action, resourceKey) {
      return function(parameters) {
        var cached, deferred, item, key, resource, _i, _len;
        resource = action.apply(null, arguments);
        resource.$httpPromise = resource.$promise;
        if (angular.isFunction(parameters)) {
          parameters = null;
        }
        key = readKey(resourceKey, parameters);
        resource.$httpPromise.then(function(response) {
          return cache.setItem(key, response);
        });
        cached = cache.getItem(key);
        if (cached) {
          if (angular.isArray(cached)) {
            for (_i = 0, _len = cached.length; _i < _len; _i++) {
              item = cached[_i];
              resource.push(item);
            }
          } else {
            angular.extend(resource, cached);
          }
          deferred = $q.defer();
          resource.$promise = deferred.promise;
          deferred.resolve(resource);
        }
        return resource;
      };
    };
    writeCache = function(action, resourceKey) {
      return function(parameters) {
        var resource, writeArgs;
        writeArgs = arguments;
        resource = action.apply(null, writeArgs);
        return resource;
      };
    };
    defaultActions = {
      get: {
        method: 'GET'
      },
      query: {
        method: 'GET',
        isArray: true
      },
      save: {
        method: 'POST'
      },
      remove: {
        method: 'DELETE'
      },
      "delete": {
        method: 'DELETE'
      }
    };
    return function() {
      var $key, CachedResource, Resource, action, actions, arg, args, name, paramDefaults, params, url, _ref;
      args = Array.prototype.slice.call(arguments);
      $key = args.shift();
      url = args.shift();
      while (args.length) {
        arg = args.pop();
        if (typeof arg[Object.keys(arg)[0]] === 'object') {
          actions = arg;
        } else {
          paramDefaults = arg;
        }
      }
      if (actions == null) {
        actions = defaultActions;
      }
      if (paramDefaults == null) {
        paramDefaults = {};
      }
      Resource = $resource.call(null, url, paramDefaults, actions);
      CachedResource = {
        $resource: Resource,
        $key: $key
      };
      for (name in actions) {
        params = actions[name];
        action = Resource[name].bind(Resource);
        if (params.method === 'GET') {
          CachedResource[name] = readCache(action, $key);
        } else if ((_ref = params.method) === 'POST' || _ref === 'PUT' || _ref === 'DELETE') {
          CachedResource[name] = writeCache(action, $key);
        } else {
          CachedResource[name] = action;
        }
      }
      return CachedResource;
    };
  }
]);

app;

},{}]},{},[1])